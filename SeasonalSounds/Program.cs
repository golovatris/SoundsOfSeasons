using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Noggog;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Records;
using DynamicData;
using StringExtensions;

namespace SeasonalSounds
{
    public class Program
    {
        static Lazy<Settings> Settings = null!;

        static List<string> whitelistedWorldSpaces = new List<string>();
        static bool useWorldspacesWhitelist = false;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings(
                    nickname: "Settings",
                    path: "settings.json",
                    out Settings)
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            int i = 0;
            string seasonsOfSkyrimIniPath = state.DataFolderPath + @"\SKSE\Plugins\po3_SeasonsOfSkyrim.ini";
            
            List<int> winterMonths = new List<int>() {0, 1, 11};
            List<int> springMonths = new List<int>() { 2, 3, 4 };
            List<int> summerMonths = new List<int>() { 5, 6, 7 };
            List<int> autumnMonths = new List<int>() { 8, 9, 10 };

            if (File.Exists(seasonsOfSkyrimIniPath))
            {
                Console.WriteLine("Seasons of Skyrim config file is found.");
                IniReader seasonsOfSkyrimIni = new IniReader(state.DataFolderPath + "\\SKSE\\Plugins\\po3_SeasonsOfSkyrim.ini");
                if (Settings.Value.SeasonsOfSkyrimSettings.UseSeasonsOfSkyrimMonthToSeasonMap)
                {
                    Console.WriteLine("Using season transition from Seasons of Skyrim config file.");
                    winterMonths.Clear();
                    springMonths.Clear();
                    summerMonths.Clear();
                    autumnMonths.Clear();
                    foreach (string item in new string[] {
                        "Morning Star", "Sun's Dawn", "First Seed", "Rain's Hand",
                        "Second Seed", "Mid Year", "Sun's Height", "Last Seed",
                        "Hearthfire", "Frost Fall", "Sun's Dusk", "Evening Star"
                    })
                    {
                        switch (seasonsOfSkyrimIni.GetValue(item, "Settings"))
                        {
                            case "1":
                                winterMonths.Add(i);
                                break;
                            case "2":
                                springMonths.Add(i);
                                break;
                            case "3":
                                summerMonths.Add(i);
                                break;
                            case "4":
                                autumnMonths.Add(i);
                                break;
                            default:
                                throw new InvalidOperationException("Couldn't read season for " + item + " from Seasons of Skyrim ini file.");
                        }
                        i++;
                    }
                } else {
                    Console.WriteLine("Using default season transition flow.");
                }
                if (Settings.Value.SeasonsOfSkyrimSettings.UseSeasonsOfSkyrimWorldspaceWhitelist)
                {
                    Console.WriteLine("Using worldspaces from Seasons of Skyrim config file as the whitelist.");
                    foreach (string season in new string[] { "Winter", "Spring", "Summer", "Autumn"})
                    {
                        string[] worldspaces = seasonsOfSkyrimIni.GetValue("Worldspaces", season).Split("|");
                        if (worldspaces.Length > 0)
                        {
                            foreach (string worldspace in worldspaces)
                            {
                                if (!whitelistedWorldSpaces.Exists(e => e == worldspace)) {
                                    whitelistedWorldSpaces.Add(worldspace);
                                }
                            }
                        }
                    }
                    useWorldspacesWhitelist = true;
                } else {
                    Console.WriteLine("Not using worldspaces whitelist.");
                }
            } else {
                Console.WriteLine("Seasons of Skyrim config file is not found.");
                Console.WriteLine("Using default season transition flow.");
                Console.WriteLine("Not using worldspaces whitelist.");
            }
            
            Console.WriteLine("Winter months: " + string.Join(", ", winterMonths));
            Console.WriteLine("Spring months: " + string.Join(", ", springMonths));
            Console.WriteLine("Summer months: " + string.Join(", ", summerMonths));
            Console.WriteLine("Autumn months: " + string.Join(", ", autumnMonths));

            Console.WriteLine("Use worldspaces whitelist: " + useWorldspacesWhitelist);
            Console.WriteLine("Whitelisted worldspaces: " + string.Join(", ", whitelistedWorldSpaces));

            List<ConditionFloat> winterConditions = new List<ConditionFloat>();
            List<ConditionFloat> notWinterConditions = new List<ConditionFloat>();
            List<ConditionFloat> summerConditions = new List<ConditionFloat>();
            List<ConditionFloat> notSummerConditions = new List<ConditionFloat>();

            var currentMonth = new FormLink<IFormListGetter>(FormKey.Factory("000036:Skyrim.esm"));

            Console.WriteLine("Forming winter conditions...");
            i = 0;
            foreach (int month in winterMonths)
            {
                winterConditions.Add(new()
                {
                    CompareOperator = CompareOperator.EqualTo,
                    ComparisonValue = month,
                    Data = new GetGlobalValueConditionData()
                });
                (winterConditions.Last().Data as GetGlobalValueConditionData)!.Global = new FormLinkOrIndex<IGlobalGetter>(winterConditions.Last().Data, currentMonth!.FormKey);
                if (i != 0) {
                    winterConditions.Last().Flags = Condition.Flag.OR;
                }
                i++;
            }
            Console.WriteLine("Forming not winter conditions...");
            i = 0;
            foreach (int month in winterMonths)
            {
                notWinterConditions.Add(new()
                {
                    CompareOperator = CompareOperator.NotEqualTo,
                    ComparisonValue = month,
                    Data = new GetGlobalValueConditionData()
                });
                (notWinterConditions.Last().Data as GetGlobalValueConditionData)!.Global = new FormLinkOrIndex<IGlobalGetter>(notWinterConditions.Last().Data, currentMonth!.FormKey);
                i++;
            }
            Console.WriteLine("Forming summer conditions...");
            i = 0;
            foreach (int month in summerMonths)
            {
                summerConditions.Add(new()
                {
                    CompareOperator = CompareOperator.EqualTo,
                    ComparisonValue = month,
                    Data = new GetGlobalValueConditionData()
                });
                (summerConditions.Last().Data as GetGlobalValueConditionData)!.Global = new FormLinkOrIndex<IGlobalGetter>(summerConditions.Last().Data, currentMonth!.FormKey);
                if (i != 0) {
                    summerConditions.Last().Flags = Condition.Flag.OR;
                }
                i++;
            }
            Console.WriteLine("Forming not summer conditions...");
            i = 0;
            foreach (int month in summerMonths)
            {
                notSummerConditions.Add(new()
                {
                    CompareOperator = CompareOperator.NotEqualTo,
                    ComparisonValue = month,
                    Data = new GetGlobalValueConditionData()
                });
                (notSummerConditions.Last().Data as GetGlobalValueConditionData)!.Global = new FormLinkOrIndex<IGlobalGetter>(notSummerConditions.Last().Data, currentMonth!.FormKey);
                i++;
            }

            // throw new InvalidOperationException("Exit");

            if (
                Settings.Value.TemplateCityRegionEditorIdForPossiblyFrozenRegions.TestEditorID("") ||
                (Settings.Value.SeasonalLandscapesUnfrozenModeSettings.TemplateCityRegionEditorIdForUnfrozenRegions.TestEditorID("") && Settings.Value.SeasonalLandscapesUnfrozenModeSettings.EnableSeasonalLandscapesUnfrozenCompatibilityMode) ||
                Settings.Value.TemplateWildernessRegionEditorIdForPossiblyFrozenRegions.TestEditorID("") ||
                (Settings.Value.SeasonalLandscapesUnfrozenModeSettings.TemplateWildernessRegionEditorIdForUnfrozenRegions.TestEditorID("") && Settings.Value.SeasonalLandscapesUnfrozenModeSettings.EnableSeasonalLandscapesUnfrozenCompatibilityMode)
            ) {
                throw new InvalidOperationException("All of the template regions must be defined");
            }

            List<IRegionSoundGetter> wildWinter = new List<IRegionSoundGetter>();
            List<IRegionSoundGetter> wildUnfrozenSummmer = new List<IRegionSoundGetter>();
            List<IRegionSoundGetter> cityWinter = new List<IRegionSoundGetter>();
            List<IRegionSoundGetter> cityUnfrozenSummmer = new List<IRegionSoundGetter>();

            List<IRegionGetter> regions = state.LoadOrder.PriorityOrder.Region().WinningOverrides().AsParallel().ToList();

            bool templateWildernessRegionEditorIdForUnfrozenRegionsFound = false;
            bool templateCityRegionEditorIdForUnfrozenRegionsFound = false;
            bool templateWildernessRegionEditorIdForPossiblyFrozenRegionsFound = false;
            bool templateCityRegionEditorIdForPossiblyFrozenRegionsFound = false;

            // First pass through the regions.
            // We prepare sounds for regions that are permanently frozen and regions that are never frozen in vanilla.
            foreach (IRegionGetter region in regions)
            {
                // No sounds. Skip region.
                if (region.Sounds == null || region.Sounds.Sounds == null)
                    continue;

                foreach (IRegionSoundGetter? sound in region.Sounds.Sounds)
                {
                    ISoundDescriptorGetter? regionSound = sound.Sound.TryResolve(state.LinkCache);

                    // Region sound could not be resolved. Skipping.
                    if (regionSound == null)
                        continue;

                    // Region EditorID is undefined. Skipping.
                    if (region.EditorID == null)
                        continue;

                    // In this iteration The sound is not something we are interested in. Skip sound.
                    if (!IsConsiderableSound(regionSound))
                        continue;

                    // The sound is playing only during specific weathers. Skip sound.
                    if (IsExclusiveWeatherSound(regionSound))
                        continue;

                    RegionSound newSound = sound.DeepCopy();
                    if (region.EditorID.TestEditorID(Settings.Value.TemplateWildernessRegionEditorIdForPossiblyFrozenRegions)) { // Generic snowy wilderness region
                        var copyRecord = state.PatchMod.SoundDescriptors.DuplicateInAsNewRecord(regionSound);
                        copyRecord.EditorID = regionSound.EditorID + "_WINTER_ONLY";
                        foreach (ConditionFloat condition in winterConditions)
                        {
                            copyRecord.Conditions.Insert(0, condition);
                        }
                        newSound.Sound = copyRecord.ToLink<ISoundDescriptorGetter>();
                        wildWinter.Add(newSound);
                        templateWildernessRegionEditorIdForPossiblyFrozenRegionsFound = true;
                    } else if (
                        region.EditorID.TestEditorID(Settings.Value.SeasonalLandscapesUnfrozenModeSettings.TemplateWildernessRegionEditorIdForUnfrozenRegions) &&
                        Settings.Value.SeasonalLandscapesUnfrozenModeSettings.EnableSeasonalLandscapesUnfrozenCompatibilityMode
                    ) { // Generic wilderness region for unfrozen wilderness
                        var copyRecord = state.PatchMod.SoundDescriptors.DuplicateInAsNewRecord(regionSound);
                        copyRecord.EditorID = regionSound.EditorID + "_SUMMER_ONLY";
                        foreach (ConditionFloat condition in summerConditions)
                        {
                            copyRecord.Conditions.Insert(0, condition);
                        }
                        newSound.Sound = copyRecord.ToLink<ISoundDescriptorGetter>();
                        wildUnfrozenSummmer.Add(newSound);
                        templateWildernessRegionEditorIdForUnfrozenRegionsFound = true;
                    } else if (
                        region.EditorID.TestEditorID(Settings.Value.SeasonalLandscapesUnfrozenModeSettings.TemplateCityRegionEditorIdForUnfrozenRegions) &&
                        Settings.Value.SeasonalLandscapesUnfrozenModeSettings.EnableSeasonalLandscapesUnfrozenCompatibilityMode
                    ) { // Generic city region for unfrozen cities
                        var copyRecord = state.PatchMod.SoundDescriptors.DuplicateInAsNewRecord(regionSound);
                        copyRecord.EditorID = regionSound.EditorID + "_SUMMER_ONLY";
                        foreach (ConditionFloat condition in summerConditions)
                        {
                            copyRecord.Conditions.Insert(0, condition);
                        }
                        newSound.Sound = copyRecord.ToLink<ISoundDescriptorGetter>();
                        cityUnfrozenSummmer.Add(newSound);
                        templateCityRegionEditorIdForUnfrozenRegionsFound = true;
                    } else if (region.EditorID.TestEditorID(Settings.Value.TemplateCityRegionEditorIdForPossiblyFrozenRegions)) { // Generic snowy city region
                        var copyRecord = state.PatchMod.SoundDescriptors.DuplicateInAsNewRecord(regionSound);
                        copyRecord.EditorID = regionSound.EditorID + "_WINTER_ONLY";
                        foreach (ConditionFloat condition in winterConditions)
                        {
                            copyRecord.Conditions.Insert(0, condition);
                        }
                        newSound.Sound = copyRecord.ToLink<ISoundDescriptorGetter>();
                        cityWinter.Add(newSound);
                        templateCityRegionEditorIdForPossiblyFrozenRegionsFound = true;
                    }

                    if (Settings.Value.RemoveCricketSoundInWindhelm && region.EditorID == "WeatherWindhelm" && regionSound.EditorID == "AMBRCricketsRiverwoodNightIndividual01SD")
                    {
                        var overrideRegionRecord = state.PatchMod.Regions.GetOrAddAsOverride(region);
                        overrideRegionRecord!.Sounds!.Sounds.RemoveWhere(e => e.Sound.TryResolve(state.LinkCache)!.EditorID == "AMBRCricketsRiverwoodNightIndividual01SD");
                    }
                }
            }

            if (!templateWildernessRegionEditorIdForPossiblyFrozenRegionsFound)
                throw new InvalidOperationException("Frozen wilderness template region wasn't found");

            if (!templateWildernessRegionEditorIdForUnfrozenRegionsFound && Settings.Value.SeasonalLandscapesUnfrozenModeSettings.EnableSeasonalLandscapesUnfrozenCompatibilityMode)
                throw new InvalidOperationException("Unfrozen wilderness template region wasn't found");

            if (!templateCityRegionEditorIdForUnfrozenRegionsFound && Settings.Value.SeasonalLandscapesUnfrozenModeSettings.EnableSeasonalLandscapesUnfrozenCompatibilityMode)
                throw new InvalidOperationException("Unfrozen city template region wasn't found");

            if (!templateCityRegionEditorIdForPossiblyFrozenRegionsFound)
                throw new InvalidOperationException("Frozen city template region wasn't found");

            // Second pass through the regions.
            // We analyze the region and perform manipuilations:
            // - To vanilla permanently frozen wilderness region sounds we add notSummerConditionMin and notSummerConditionMax conditions
            //   as in Seasonal Landscapes Unfrozen they are actually unfrozen only during summer. On top we add sounds from the wildUnfrozenSummmer list;
            // - To vanilla permanently frozen city region sounds we add notSummerConditionMin and notSummerConditionMax conditions
            //   as in Seasonal Landscapes Unfrozen they are actually unfrozen only during summer. On top we add sounds from the cityUnfrozenSummmer list;
            // - To vanilla non-snowy wilderness region sounds we add notWinterConditionMin and notWinterConditionMax conditions.
            //   On top we add sounds from the wildWinter list;
            // - To vanilla non-snowy city region sounds we add notWinterConditionMin and notWinterConditionMax conditions.
            //   On top we add sounds from the cityWinter list.
            foreach (IRegionGetter region in regions)
            {
                if (Settings.Value.VerboseLogging) Console.WriteLine("Processing region: " + region.EditorID + " (" + region.FormKey + ")");

                // The region is in ingnore list. Skip.
                if (IsIgnoredRegion(region, state)) {
                    if (Settings.Value.VerboseLogging) Console.WriteLine("Skipped. Ignored.");
                    continue;
                }

                // No sounds. Skip region.
                if (region.Sounds == null || region.Sounds.Sounds == null) {
                    if (Settings.Value.VerboseLogging) Console.WriteLine("Skipped. No sounds.");
                    continue;
                }

                bool isCity = false;
                bool isVanillaPermanentlyFrozen = false;

                if (IsVanillaPermanentlyFrozenRegion(region))
                    isVanillaPermanentlyFrozen = true;

                if (
                    EditorIDExistsInEditorIDList(region.EditorID!, Settings.Value.CityRecognitionSettings.CityEditorIdSubstrings) ||
                    (!isCity &&
                    Settings.Value.CityRecognitionSettings.UseWorldspaceParenthoodAsCityMarker &&
                    region.Worldspace != null &&
                    region.Worldspace.TryResolve(state.LinkCache)?.Parent != null)
                )
                    isCity = true;

                if (!isCity && region.Worldspace != null)
                {
                    IWorldspaceGetter? worldspace = region.Worldspace.TryResolve(state.LinkCache);
                    if (worldspace != null && worldspace.Location != null)
                    {
                        ILocationGetter? location = worldspace.Location.TryResolve(state.LinkCache);
                        if (location != null && location.Keywords != null && location.Keywords.Count > 0)
                        {
                            foreach (FormLink<Mutagen.Bethesda.Skyrim.IKeywordGetter> keywordItem in location.Keywords) {
                                IKeywordGetter? keyword = keywordItem.TryResolve(state.LinkCache);
                                if (keyword == null || keyword.EditorID == null)
                                    continue;
                                
                                if (EditorIDExistsInEditorIDList(keyword.EditorID, Settings.Value.CityRecognitionSettings.CityKeywordsEditorIdSubstrings))
                                {
                                    isCity = true;
                                    break;
                                }
                            }
                        }
                    }
                }

                if (Settings.Value.VerboseLogging) Console.WriteLine("Is city region: " + isCity);

                Region? overrideRegionRecord = null;
                if (!isVanillaPermanentlyFrozen || Settings.Value.SeasonalLandscapesUnfrozenModeSettings.EnableSeasonalLandscapesUnfrozenCompatibilityMode) {
                    overrideRegionRecord = state.PatchMod.Regions.GetOrAddAsOverride(region);
                }

                if (overrideRegionRecord == null)
                {
                    if (Settings.Value.VerboseLogging) Console.WriteLine("Region skipped due to the Seasonal Landscapes - Unfrozen compatibility mode being disabled.");
                    continue;
                }

                for (i = overrideRegionRecord!.Sounds!.Sounds!.Count - 1; i >= 0; i--) {
                    IRegionSoundGetter? sound = overrideRegionRecord!.Sounds!.Sounds![i];
                    ISoundDescriptorGetter? regionSound = sound.Sound.TryResolve(state.LinkCache);

                    // Region sound could not be resolved. Skipping.
                    if (regionSound == null) {
                        if (Settings.Value.VerboseLogging) Console.WriteLine("Cound not process sound as it couldn't be resolved.");
                        continue;
                    }

                    if (Settings.Value.VerboseLogging) Console.WriteLine("Processing sound: " + (regionSound.EditorID ?? "") + " (" + regionSound!.FormKey + ")");

                    // The sound is not something we are interested in. Skip sound.
                    if (!IsConsiderableSound(regionSound)) {
                        if (Settings.Value.VerboseLogging) Console.WriteLine("Skipped. Didn't pass sound check.");
                        continue;
                    }

                    // The sound is playing only during specific weathers. Skip sound.
                    if (IsExclusiveWeatherSound(regionSound)) {
                        if (Settings.Value.VerboseLogging) Console.WriteLine("Skipped. Is weather specific sound.");
                        continue;
                    }
                    
                    SoundDescriptor? copyRecord = null;
                    if (isVanillaPermanentlyFrozen) {
                        if (Settings.Value.SeasonalLandscapesUnfrozenModeSettings.EnableSeasonalLandscapesUnfrozenCompatibilityMode)
                        {
                            copyRecord = state.PatchMod.SoundDescriptors.Records.Where(rec => rec.EditorID == regionSound.EditorID + "_NOTSUMMER_ONLY").FirstOrDefault();
                            if (copyRecord == null) {
                                copyRecord = state.PatchMod.SoundDescriptors.DuplicateInAsNewRecord(regionSound);
                                copyRecord.EditorID = regionSound.EditorID + "_NOTSUMMER_ONLY";
                                foreach (ConditionFloat condition in notSummerConditions)
                                {
                                    copyRecord.Conditions.Insert(0, condition);
                                }
                            }
                        }
                    } else {
                        copyRecord = state.PatchMod.SoundDescriptors.Records.Where(rec => rec.EditorID == regionSound.EditorID + "_NOTWINTER_ONLY").FirstOrDefault();
                        if (copyRecord == null) {
                            copyRecord = state.PatchMod.SoundDescriptors.DuplicateInAsNewRecord(regionSound);
                            copyRecord.EditorID = regionSound.EditorID + "_NOTWINTER_ONLY";
                            foreach (ConditionFloat condition in notWinterConditions)
                            {
                                copyRecord.Conditions.Insert(0, condition);
                            }
                        }
                    }
                    if (copyRecord == null)
                        continue;

                    RegionSound newSound = sound.DeepCopy();
                    newSound.Sound = copyRecord.ToLink<ISoundDescriptorGetter>();
                    overrideRegionRecord!.Sounds!.Sounds!.Replace((RegionSound)sound, newSound);
                }

                if (isCity && isVanillaPermanentlyFrozen) {
                    cityUnfrozenSummmer.ForEach(newSound => {
                        overrideRegionRecord!.Sounds!.Sounds!.Add((RegionSound)newSound);
                    });
                } else if (!isCity && isVanillaPermanentlyFrozen) {
                    wildUnfrozenSummmer.ForEach(newSound => {
                        overrideRegionRecord!.Sounds!.Sounds!.Add((RegionSound)newSound);
                    });
                } else if (isCity && !isVanillaPermanentlyFrozen) {
                    cityWinter.ForEach(newSound => {
                        overrideRegionRecord!.Sounds!.Sounds!.Add((RegionSound)newSound);
                    });
                } else if (!isCity && !isVanillaPermanentlyFrozen) {
                    wildWinter.ForEach(newSound => {
                        overrideRegionRecord!.Sounds!.Sounds!.Add((RegionSound)newSound);
                    });
                }
            }
        }

        // Check if given sound plays only during specific weathers
        private static bool IsExclusiveWeatherSound(ISoundDescriptorGetter sound)
        {
            if (!sound.Conditions.Any())
                return false;

            foreach (IConditionGetter soundCondition in sound.Conditions)
            {
                if (
                    soundCondition is IConditionFloatGetter condFloat &&
                    condFloat.Data is IGetIsCurrentWeatherConditionDataGetter condData &&
                    condFloat.CompareOperator == CompareOperator.EqualTo &&
                    condFloat.ComparisonValue == 1.0
                ) {
                    return true;
                }
            }

            return false;
        }

        private static bool IsVanillaPermanentlyFrozenRegion(IRegionGetter region)
        {
            if (region.EditorID == null)
                return false;

            return EditorIDExistsInEditorIDList(region.EditorID, Settings.Value.VanillaFrozenEditorIdSubstrings);
        }

        private static bool IsIgnoredRegion(IRegionGetter region, IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            if (region.EditorID == null) {
                if (Settings.Value.VerboseLogging) Console.WriteLine("Region is ignored due to empty EditorID: " + region.FormKey);
                return true;
            }

            if (useWorldspacesWhitelist && region.Worldspace != null)
            {
                IWorldspaceGetter? worldspace = region.Worldspace.TryResolve(state.LinkCache);
                if (worldspace != null && worldspace.EditorID != null && !EditorIDExistsInEditorIDList(worldspace.EditorID, whitelistedWorldSpaces))
                {
                    if (Settings.Value.VerboseLogging) Console.WriteLine("Region is ignored due to its worldspace not being present in whitelist: " + region.EditorID + " (" + region.FormKey + ")");
                    return true;
                }
            }

            if (EditorIDExistsInEditorIDList(region.EditorID, Settings.Value.IgnoredRegionEditorIdSubstrings))
            {
                if (Settings.Value.VerboseLogging) Console.WriteLine("Region is ignored due to being present in region ignore list: " + region.EditorID + " (" + region.FormKey + ")");
                return true;
            }
            return false;
        }

        private static bool IsConsiderableSound(ISoundDescriptorGetter sound)
        {
            if (sound.EditorID == null)
                return false;

            if (EditorIDExistsInEditorIDList(sound.EditorID, Settings.Value.IgnoredSoundsEditorIdSubstrings))
                return false;

            return EditorIDExistsInEditorIDList(sound.EditorID, Settings.Value.ConsiderableSoundsEditorIdSubstrings);
        }

        private static bool EditorIDExistsInEditorIDList(string edID, List<string> edIDList)
        {
            foreach (string query in edIDList)
            {
                if (edID.TestEditorID(query)) {
                    return true;
                }
            }
            return false;
        }
    }
}

namespace StringExtensions
{
    public static class StringExtensionsClass
    {
        public static bool TestEditorID(this string edID, string query)
        {
            bool isNegative = false;
            bool hasFuzzyStart = false;
            bool hasFuzzyEnd = false;
            if (query.StartsWith("!")) {
                query = query.Remove(0, 1);
                isNegative = true;
            }
            if (query.StartsWith("%")) {
                query = query.Remove(0, 1);
                hasFuzzyStart = true;
            }
            if (query.EndsWith("%")) {
                query = query.Remove(query.Length - 1, 1);
                hasFuzzyEnd = true;
            }

            bool result;
            if (hasFuzzyStart && hasFuzzyEnd) {
                result = edID.Contains(query);
            } else if (hasFuzzyStart) {
                result = edID.EndsWith(query);
            } else if (hasFuzzyEnd) {
                result = edID.StartsWith(query);
            } else {
                result = edID == query;
            }

            return isNegative ? !result : result;
        }
    }
}